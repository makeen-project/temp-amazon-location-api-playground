{
	"apis": {
		"reverseGeocode": [
			{
				"type": "reverseGeocode",
				"submitButtonText": "ReverseGeocode",
				"id": "reverse-geocode",
				"imageSource": "images/Map1.png",
				"title": "ReverseGeocode API Playground",
				"description": "The Reverse Geocode API converts latitude/Longitude into human-readable addresses. Use [[QueryPosition]] with latitude/longitude. Optional parameters include [[BiasPosition]], [[Filter]], and [[MaxResults]].The response contains [[ResultItems]] with [[Address]], [[Position]], and Optional [[TimeZone]] data. Use [[AdditionalFeatures]] to request extra information like time zones.",
				"shouldRenderMap": true,
				"missingFieldsMessage": "Click the map to reverse geocode",
				"requestParams": [],
				"buildSampleButton": {
					"text": "Build a sample ReverseGeocode Solution",
					"link": "https://docs.aws.amazon.com/location/latest/developerguide/reverse-geocoding.html"
				},
				"relatedResources": [
					{
						"text": "Reverse Geocode API documentation",
						"link": "https://docs.aws.amazon.com/location/latest/developerguide/what-is.html"
					},
					{
						"text": "Geocode Developer Guide",
						"link": "https://docs.aws.amazon.com/location/latest/developerguide/geocoding.html"
					},
					{
						"text": "Demo Application",
						"link": "https://demos.location.aws.dev/"
					}
				],
				"locationPopupConfig": {
					"showPlaceId": true,
					"showLatitude": true,
					"showLongitude": true
				},
				"formFields": [
					{
						"type": "lngLatInput",
						"name": "queryPosition",
						"label": "Query Position",
						"required": true,
						"placeholder": "Enter longitude and latitude coordinates"
					},
					{
						"type": "multiSelect",
						"name": "additionalFeatures",
						"label": "Additional Features",
						"required": false,
						"options": [
							{
								"label": "Access",
								"value": "Access"
							},
							{
								"label": "TimeZone",
								"value": "TimeZone"
							}
						]
					},
					{
						"type": "multiSelect",
						"name": "includePlaceTypes",
						"label": "Include Place Types",
						"required": false,
						"options": [
							{
								"label": "InterpolatedAddress",
								"value": "InterpolatedAddress"
							},
							{
								"label": "Intersection",
								"value": "Intersection"
							},
							{
								"label": "Locality",
								"value": "Locality"
							},
							{
								"label": "PointAddress",
								"value": "PointAddress"
							},
							{
								"label": "Street",
								"value": "Street"
							}
						]
					},
					{
						"type": "radio",
						"name": "intendedUse",
						"label": "Intended use",
						"required": false,
						"defaultValue": "SingleUse",
						"options": [
							{
								"label": "Single use",
								"value": "SingleUse"
							},
							{
								"label": "Storage",
								"value": "Storage"
							}
						]
					},
					{
						"type": "text",
						"name": "apiKey",
						"label": "API Key",
						"required": false,
						"placeholder": "Enter your API key",
						"inputType": "password"
					},
					{
						"type": "dropdown",
						"name": "language",
						"label": "Language",
						"required": false,
						"options": [
							{
								"label": "English",
								"value": "en"
							},
							{
								"label": "Spanish",
								"value": "es"
							},
							{
								"label": "French",
								"value": "fr"
							},
							{
								"label": "German",
								"value": "de"
							}
						]
					},
					{
						"type": "sliderWithInput",
						"name": "maxResults",
						"label": "Max Results",
						"required": false,
						"min": 1,
						"max": 100,
						"step": 1,
						"defaultValue": 10
					},
					{
						"type": "dropdown",
						"name": "politicalView",
						"label": "Political View",
						"required": false,
						"options": [
							{
								"label": "AR",
								"value": "AR"
							},
							{
								"label": "EG",
								"value": "EG"
							},
							{
								"label": "IN",
								"value": "IN"
							},
							{
								"label": "KE",
								"value": "KE"
							},
							{
								"label": "MA",
								"value": "MA"
							},
							{
								"label": "RU",
								"value": "RU"
							},
							{
								"label": "SD",
								"value": "SD"
							},
							{
								"label": "RS",
								"value": "RS"
							},
							{
								"label": "SR",
								"value": "SR"
							},
							{
								"label": "SY",
								"value": "SY"
							},
							{
								"label": "TR",
								"value": "TR"
							},
							{
								"label": "TZ",
								"value": "TZ"
							},
							{
								"label": "UY",
								"value": "UY"
							},
							{
								"label": "VN",
								"value": "VN"
							}
						]
					},
					{
						"type": "sliderWithInput",
						"name": "queryRadius",
						"label": "Query Radius",
						"min": 1,
						"max": 21000000,
						"step": 1,
						"required": false
					}
				],
				"formContent": {
					"type": "list",
					"items": [
						{
							"text": "Click on point on the map or enter coordinates then select [[Reverse Geocode]]"
						},
						{
							"text": "Results will be displayed and shown on the map"
						}
					]
				},
				"apiHandler": {
					"apiMethod": "getPlaceByCoordinates",
					"paramMapping": {
						"queryPosition": "QueryPosition",
						"additionalFeatures": "AdditionalFeatures",
						"includePlaceTypes": "Filter.IncludePlaceTypes",
						"intendedUse": "IntendedUse",
						"language": "Language",
						"maxResults": "MaxResults",
						"politicalView": "PoliticalView",
						"queryRadius": "QueryRadius"
					},
					"validationRules": [
						{
							"field": "queryPosition",
							"rule": "required",
							"message": "Query Position is required and must contain longitude and latitude"
						}
					]
				},
				"codeSnippets": {
					"JavaScript": "import { GeoPlacesClient, ReverseGeocodeCommand } from \"@aws-sdk/client-geo-places\";\n\n// Initialize the client\nconst client = new GeoPlacesClient({\n  region: \"us-east-1\" // Replace with your region\n});\n\n// Create the reverse geocode request\nconst params = {\n  QueryPosition: [{{queryPosition}}], // [longitude, latitude]\n  MaxResults: {{maxResults}},\n  Language: \"{{language}}\",\n  PoliticalView: \"{{politicalView}}\"\n};\n\n// Make the request\nconst command = new ReverseGeocodeCommand(params);\nconst response = await client.send(command);\nconsole.log(response);",
					"Python": "import boto3\n\n# Initialize the client\nclient = boto3.client('geo-places', region_name='us-east-1')  # Replace with your region\n\n# Create the reverse geocode request\nparams = {\n    'QueryPosition': [{{queryPosition}}],  # [longitude, latitude]\n    'MaxResults': {{maxResults}},\n    'Language': '{{language}}',\n    'PoliticalView': '{{politicalView}}'\n}\n\n# Make the request\nresponse = client.reverse_geocode(**params)\nprint(response)",
					"Ruby": "require 'aws-sdk-geoplaces'\n\n# Initialize the client\nclient = Aws::GeoPlaces::Client.new(region: 'us-east-1')  # Replace with your region\n\n# Create the reverse geocode request\nparams = {\n  query_position: [{{queryPosition}}],  # [longitude, latitude]\n  max_results: {{maxResults}},\n  language: '{{language}}',\n  political_view: '{{politicalView}}'\n}\n\n# Make the request\nresponse = client.reverse_geocode(params)\nputs response",
					"paramPlaceholders": {
						"queryPosition": "0, 0",
						"maxResults": "1",
						"language": "en",
						"politicalView": "US"
					}
				}
			}
		],
		"Geocode": [
			{
				"type": "geocode",
				"id": "geocode",
				"submitButtonText": "Geocode",
				"imageSource": "images/Map2.png",
				"title": "Geocode Playground",
				"missingFieldsMessage": "Enter an address to geocode",
				"description": "The Geocode API transforms addresses or place names into geographic coordinates with detailed location information. Use the Query parameter for free-form text input or QueryComponents for structured queries. Optional parameters include BiasPosition, Filter, Language, and AdditionalFeatures. The API returns coordinates, formatted address components, and any additional requested information.",
				"shouldRenderMap": false,
				"requestParams": [],
				"buildSampleButton": {
					"text": "Build a sample Geocoding solution",
					"link": "https://docs.aws.amazon.com/location/latest/developerguide/geocoding.html"
				},
				"relatedResources": [
					{
						"text": "Geocode API documentation",
						"link": "https://docs.aws.amazon.com/location/latest/developerguide/what-is-amazon-location.html"
					},
					{
						"text": "Geocode Developer Guide",
						"link": "https://docs.aws.amazon.com/location/latest/developerguide/geocoding.html"
					},
					{
						"text": "Demo Application",
						"link": "https://demos.location.aws.dev/"
					}
				],
				"locationPopupConfig": {
					"showPlaceId": false,
					"showLatitude": true,
					"showLongitude": true
				},
				"formFields": [
					{
						"type": "address",
						"name": "query",
						"label": "Address",
						"required": true,
						"placeholder": "Enter an address or place name"
					},
					{
						"type": "multiSelect",
						"name": "additionalFeatures",
						"label": "Additional Features",
						"required": false,
						"options": [
							{
								"label": "Access",
								"value": "Access"
							},
							{
								"label": "TimeZone",
								"value": "TimeZone"
							}
						]
					},
					{
						"type": "dropdown",
						"name": "language",
						"label": "Language",
						"required": false,
						"options": [
							{
								"label": "English",
								"value": "en"
							},
							{
								"label": "Spanish",
								"value": "es"
							},
							{
								"label": "French",
								"value": "fr"
							},
							{
								"label": "German",
								"value": "de"
							}
						]
					},
					{
						"type": "sliderWithInput",
						"name": "maxResults",
						"label": "Max Results",
						"required": false,
						"min": 1,
						"max": 100,
						"step": 1,
						"defaultValue": 10
					},
					{
						"type": "dropdown",
						"name": "politicalView",
						"label": "Political View",
						"required": false,
						"options": [
							{
								"label": "US",
								"value": "US"
							},
							{
								"label": "CN",
								"value": "CN"
							},
							{
								"label": "IN",
								"value": "IN"
							}
						]
					}
				],
				"formContent": {
					"type": "list",
					"items": [
						{
							"text": "Enter an address and click 'Geocode"
						},
						{
							"text": "Results will be displayed and shown on the map"
						}
					]
				},
				"apiHandler": {
					"apiMethod": "getPlaceByAddress",
					"paramMapping": {
						"query": "Query",
						"biasPosition": "BiasPosition",
						"additionalFeatures": "AdditionalFeatures",
						"language": "Language",
						"maxResults": "MaxResults",
						"politicalView": "PoliticalView"
					},
					"validationRules": [
						{
							"field": "query",
							"rule": "required",
							"message": "Address query is required"
						}
					]
				},
				"codeSnippets": {
					"JavaScript": "import { GeoPlacesClient, SearchTextCommand } from \"@aws-sdk/client-geo-places\";\n\n// Initialize the client\nconst client = new GeoPlacesClient({\n  region: \"us-east-1\" // Replace with your region\n});\n\n// Create the geocode request\nconst params = {\n  QueryText: \"{{query}}\",\n  BiasPosition: [{{biasPosition}}],\n  MaxResults: {{maxResults}},\n  Language: \"{{language}}\",\n  PoliticalView: \"{{politicalView}}\"\n};\n\n// Make the request\nconst command = new SearchTextCommand(params);\nconst response = await client.send(command);\nconsole.log(response);",
					"Python": "import boto3\n\n# Initialize the client\nclient = boto3.client('geo-places', region_name='us-east-1')  # Replace with your region\n\n# Create the geocode request\nparams = {\n    'QueryText': '{{query}}',\n    'BiasPosition': [{{biasPosition}}],\n    'MaxResults': {{maxResults}},\n    'Language': '{{language}}',\n    'PoliticalView': '{{politicalView}}'\n}\n\n# Make the request\nresponse = client.search_text(**params)\nprint(response)",
					"Ruby": "require 'aws-sdk-geoplaces'\n\n# Initialize the client\nclient = Aws::GeoPlaces::Client.new(region: 'us-east-1')  # Replace with your region\n\n# Create the geocode request\nparams = {\n  query_text: '{{query}}',\n  bias_position: [{{biasPosition}}],\n  max_results: {{maxResults}},\n  language: '{{language}}',\n  political_view: '{{politicalView}}'\n}\n\n# Make the request\nresponse = client.search_text(params)\nputs response",
					"paramPlaceholders": {
						"query": "123 Main St, New York, NY",
						"biasPosition": "0, 0",
						"maxResults": "1",
						"language": "en",
						"politicalView": "US"
					}
				}
			}
		]
	}
}
